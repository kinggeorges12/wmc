# sudo nano /etc/nginx/sites-enabled/default
# Global default requests limited based on zone (place inside http block): /etc/nginx/nginx.conf
#    limit_req_zone $binary_remote_addr zone=req_zone:10m rate=20r/s;
#    limit_req_zone $binary_remote_addr zone=slow_zone:10m rate=5r/s;
# Required apt-get packages: nginx libnginx-mod-http-lua lua-cjson

server {
    listen 80;
    listen [::]:80;
    server_name ***REMOVED: example.ddns.com***;

    # ACME challenge
    location /.well-known/acme-challenge/ {
        allow all;
        root /var/www/certbot;
    }
}

server {
    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/***REMOVED: example.ddns.com***/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/***REMOVED: example.ddns.com***/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    # SSL configuration
    #
    # listen 443 ssl default_server;
    # listen [::]:443 ssl default_server;
    #
    # Note: You should disable gzip for SSL traffic.
    # See: https://bugs.debian.org/773332
    #
    # Read up on ssl_ciphers to ensure a secure configuration.
    # See: https://bugs.debian.org/765782
    #
    # Self signed certs generated by the ssl-cert package
    # Don't use them in a production server!
    #
    # include snippets/snakeoil.conf;

    # root /var/www/html;

    # Add index.php to the list if you are using PHP
    # index index.html index.htm index.nginx-debian.html;

    # My site: reverse proxy
    # https://blog.nginx.org/blog/http-strict-transport-security-hsts-and-nginx

    # Already declared protocols and ciphers: /etc/letsencrypt/options-ssl-nginx.conf
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256';
    # ssl_prefer_server_ciphers off;
    # ssl_session_timeout 1d;
    # ssl_session_tickets off;
    ssl_session_cache shared:SSL:10m;
    # "ssl_stapling" ignored, no OCSP responder URL in the certificate
    # ssl_stapling on;
    # ssl_stapling_verify on;
    resolver 8.8.8.8 1.1.1.1 valid=300s;
    resolver_timeout 5s;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    server_tokens off;

    # base zone delay 20 requests/second
    location / {
        limit_req zone=req_zone burst=200 nodelay;
        proxy_pass http://***REMOVED: jellyfin.localhost:8096***;
        # Websockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        # Generic reverse proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # base url has 3-second delay
    location = / {
        limit_req zone=slow_zone burst=10 nodelay;
        access_by_lua_block {
            ngx.sleep(3)
        }
        proxy_pass http://***REMOVED: jellyfin.localhost:8096***;
        # Websockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        # Generic reverse proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Whitelisted paths
    location ~* ^/(videos|shows|items|playback|userviews|useritems|livetv|displaypreferences|sessions|socket|users/[^/]+/items|customtabs) {
        proxy_pass http://***REMOVED: jellyfin.localhost:8096***;
        # Websockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        # Generic reverse proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location ^~ /Users/authenticatebyname {
        limit_req zone=slow_zone burst=3;
        # Enable request body reading
        client_max_body_size 10k;
        client_body_buffer_size 10k;

        access_by_lua_block {
            local json = require "cjson"
            ngx.sleep(3)
            ngx.req.read_body()
            local data = ngx.req.get_body_data()

            if data then
                local decoded = json.decode(data)
                if decoded and decoded.Username then
                    local uname = decoded.Username
                    if uname:lower() == "admin" then
                        ngx.status = ngx.HTTP_FORBIDDEN
                        ngx.say("403 Forbidden: username not allowed")
                        return ngx.exit(ngx.HTTP_FORBIDDEN)
                    else
                        -- set cookie for allowed user
                        ngx.header["Set-Cookie"] = "UserName=" .. uname .. "; Path=/; HttpOnly; Secure;"
                    end
                else
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say("400 User not Found: please enter a username")
                    return ngx.exit(ngx.HTTP_BAD_REQUEST)
                end
            end
        }

        proxy_pass http://***REMOVED: jellyfin.localhost:8096***;
        # Websockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        # Generic reverse proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Iframe cookies
        proxy_cookie_flags ~ Secure;
    }

    location /Users/AuthenticateWithQuickConnect {
        limit_req zone=slow_zone burst=3;
        # Enable request body reading
        client_max_body_size 10k;
        client_body_buffer_size 10k;

        content_by_lua_block {
            -- read the client request body
            ngx.req.read_body()
            local body = ngx.req.get_body_data() or ""
            -- read the client request method and map to constant
            local method_str = ngx.req.get_method()
            local method_map = {
                GET     = ngx.HTTP_GET,
                HEAD    = ngx.HTTP_HEAD,
                POST    = ngx.HTTP_POST,
                PUT     = ngx.HTTP_PUT,
                DELETE  = ngx.HTTP_DELETE,
                OPTIONS = ngx.HTTP_OPTIONS,
                PATCH   = ngx.HTTP_PATCH
            }
            local method = method_map[method_str]
            -- Forward to named internal location
            local res = ngx.location.capture("/internal/AuthenticateWithQuickConnect", {
                method = method,
                body = body,
                copy_all_vars = true
            })
            if not res or not res.status or not res.body then
                ngx.header.content_type = "text/plain"
                ngx.status = ngx.HTTP_BAD_GATEWAY
                ngx.say("502 No response from proxy server for AuthenticateWithQuickConnect")
                return
            end
            -- Intercept and inspect the upstream response body
            local cjson = require "cjson"
            local ok, decoded_res = pcall(cjson.decode, res.body)
            if ok and decoded_res and decoded_res.User and decoded_res.User.Name then
                local uname = decoded_res.User.Name
                if uname:lower() == "admin" then
                    -- block response entirely
                    ngx.header.content_type = "text/plain"
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say("403 Forbidden: username not allowed")
                    return
                else
                    -- Copy proxy headers to response
                    for k, v in pairs(res.header) do
                        if k:lower() ~= "content-length" and k:lower() ~= "transfer-encoding" then
                            ngx.header[k] = v
                        end
                    end
                    -- save username for Jellyseerr
                    ngx.header["Set-Cookie"] = "UserName=" .. uname .. "; Path=/; HttpOnly; Secure;"
                    -- pass the proxy status to response
                    ngx.status = res.status
                    -- pass the proxy body to response
                    ngx.say(res.body)
                    return
                end
            else
                -- Unable to decode or missing User.Name
                ngx.header.content_type = "text/plain"
                ngx.status = 412
                ngx.say("412 Precondition Failed: invalid or missing username")
                return
            end
        }
    }

    # Internal location for QuickConnect lua
    location /internal/AuthenticateWithQuickConnect {
        internal;
        proxy_pass http://***REMOVED: jellyfin.localhost:8096***/Users/AuthenticateWithQuickConnect;
        # Generic reverse proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # ensure raw JSON
        proxy_set_header Accept-Encoding "";
    }

    location ^~ /QuickConnect {
        limit_req zone=slow_zone burst=10;
        # Enable request body reading
        client_max_body_size 10k;
        client_body_buffer_size 10k;

        proxy_pass http://***REMOVED: jellyfin.localhost:8096***;
        # Websockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        # Generic reverse proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location ~* password {
        limit_req zone=slow_zone burst=10;
        access_by_lua_block {
            ngx.sleep(3)
        }
        return 403;
    }

    # https://github.com/IAmParadox27/jellyfin-plugin-custom-tabs/issues/11#issuecomment-2869375571
    location ~* "/web/home-html\.[0-9a-f]{20}\.chunk\.js$" {
        proxy_pass http://***REMOVED: jellyfin.localhost:8096***;
        # Websockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        # Generic reverse proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Enable custom tabs plugin that uses dynamic html updates
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires 0;
    }

    # Jellyseerr integration
    location ^~ /jellyseerr {
        proxy_pass http://***REMOVED: jellyseerr.localhost:5056***;
        # Websockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        # Generic reverse proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

}
